//////////////引用////////////////
//功能:1、引用作为参数：函数参数传递中，提高传递效率，较少栈空间开销（特别适用于大块数据参数传递）
//     2、常引用：既要利用引用提高程序的效率，又要保护传递给函数的数据不在函数中被改变
//     3、其他功能后续补上
//注意：1、引用与指针不同，指针是个变量可以指向其他的地址，建立引用时必须进行初始化并且绝对不会指向其他地址
//      2、引用不是值，不占存储空间
//原因：1、之前的形参，需要在栈中申请空间，即费时又增加空间开销
//2、使用引用传递函数的参数，在内存中并没有产生实参的副本，它是直接对实参操作
//////////////示例程序/////////////////
#include <iostream>//标准输入输出流，需要引用std的空间名
using namespace std;//标准C++库的所有组件都是在std的名字空间中声明和定义的
void swap(int &rx,int &ry);
///////////////主函数//////////////////
int main()//只能是int main()
{
	int x=7,y=5;
	int &x1=x;//x1不是常引用能直接通过x1操作x
	const int &y1=y;//y1是常引用，若要操作y不能通过y1，只能通过y
	x1++;//能通过x1改变x
	y++;//只能直接操作y
	cout<<"before swap,x="<<x<<",y="<<y<<endl;
	swap(x,y);
	cout<<"after swap,x="<<x<<",y="<<y<<endl;
	return 0; 
}

void swap(int &rx,int &ry)//引用作为形参，实际上是对实参进行直接操作。不需要额外申请栈空间
{
	int temp=rx;//temp就需要在运行swap()时申请栈空间，运行完释放
	rx=ry;
	ry=temp;
}