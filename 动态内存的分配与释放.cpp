//////////////动态内存的分配与释放////////////////
//功能:在程序中建立了可由程序员控制生存期的变量
//new  指针变量=new 数据类型;
//     指针变量=new 数据类型(初始化); 
//     指针变量=new 数据类型[数组大小];  
//     指针变量=new 数据类型[可以是变量][常量];
//     new从堆内存中为程序分配可以保存某种类型数据的一块内存空间，
//     并返回指向该内存的首地址，该地址存放于指针变量中
//delete  delete 指针变量;
//        delete []指针变量;
//        指针变量保存着new动态分配的内存的首地址
//注意：1、new和delete配对使用，及时释放内存空间       
//      2、注意int (*p4)[10]和int *p4[10]不同
//         int (*p4)[10]是数组指针，指向一维数组的指针变量
//         int *p4[10]是指针数组，表示10个整型指针
//      3、使用前要检测是否申请空间成功，
//         new不能成功获得所需要的内存时，new返回0，即空指针
//////////////示例程序/////////////////
#include <iostream>//标准输入输出流，需要引用std
using namespace std;//标准C++库的所有组件都是在std的名字空间中声明和定义的
//////////////主函数//////////////////
int main()//只能是int main()
{
	//变量Method1
	int *p1;
	p1=new int;//分配内存空间，堆内存
	if(p1==NULL)//检测申请内存是否成功，很有必要
	{
		exit(1);//异常退出程序
	}
	*p1=666;
	cout<<"*p1="<<*p1<<endl;
	delete p1;//释放内存空间

	//变量Method2
	int *p2=new int(666);
	if(p2==NULL)//检测申请内存是否成功，很有必要
	{
		exit(1);//异常退出程序
	}
	cout<<"*p2="<<*p2<<endl;
	delete p2;

	//一维数组
	int *p3=new int[10];//长度为10的一维数组
	if(p3==NULL)//检测申请内存是否成功，很有必要
	{
		exit(1);//异常退出程序
	}
	*(p3+0)=888;//第1个元素
	*(p3+1)=666;//第2个元素
	cout<<"*p3="<<*(p3+1)<<endl;
	delete []p3;

	//二维数组
	//注意不是int *p4[10]
	int (*p4)[10]=new int[2][10];//长度为2x10的二维数组
	if(p4==NULL)//检测申请内存是否成功，很有必要
	{
		exit(1);//异常退出程序
	}
	(*p4)[0]=666;//第1行第1列的元素
	(*(p4+1))[0]=888;//第2行第1列的元素
	cout<<"*p4="<<(*(p4+1))[0]<<endl;
	delete []p4;

	return 0;   
}